name: Docker Build & Push

on:
  push:
    branches: [main, dev]
  workflow_dispatch:

# No global env needed

jobs:
  build-and-push:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest

    strategy:
      matrix:
        service: [api, web]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Generate image metadata
        id: meta
        run: |
          SERVICE="${{ matrix.service }}"

          REGISTRY="${{ secrets.DOCKERHUB_USERNAME }}"

          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            TAGS="${REGISTRY}/kamf-${SERVICE}:latest,${REGISTRY}/kamf-${SERVICE}:${{ github.sha }}"
            ENV_SUFFIX="PROD"
          else
            # dev Î∏åÎûúÏπò ÎòêÎäî workflow_dispatch
            TAGS="${REGISTRY}/kamf-${SERVICE}:dev,${REGISTRY}/kamf-${SERVICE}:dev-${{ github.sha }}"
            ENV_SUFFIX="DEV"
          fi

          echo "tags=${TAGS}" >> $GITHUB_OUTPUT
          echo "env_suffix=${ENV_SUFFIX}" >> $GITHUB_OUTPUT
          echo "service=${SERVICE}" >> $GITHUB_OUTPUT

      - name: Build and push API image
        if: matrix.service == 'api'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/api/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha,scope=api
          cache-to: type=gha,mode=max,scope=api
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}

      - name: Build and push Web image
        if: matrix.service == 'web'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/web/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          build-args: |
            NEXT_PUBLIC_API_URL=${{ steps.meta.outputs.env_suffix == 'PROD' && secrets.NEXT_PUBLIC_API_URL_PROD || secrets.NEXT_PUBLIC_API_URL_DEV }}
            NEXT_PUBLIC_APP_URL=${{ steps.meta.outputs.env_suffix == 'PROD' && secrets.NEXT_PUBLIC_APP_URL_PROD || secrets.NEXT_PUBLIC_APP_URL_DEV }}
          cache-from: type=gha,scope=web
          cache-to: type=gha,mode=max,scope=web
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}

      - name: Run security scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/kamf-${{ matrix.service }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results-${{ matrix.service }}.sarif'

      - name: Upload security scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results-${{ matrix.service }}.sarif'
          category: 'docker-${{ matrix.service }}'

  notify:
    name: Notify Build Result
    runs-on: ubuntu-latest
    needs: build-and-push
    if: always()

    steps:
      - name: Notify Slack
        if: vars.SLACK_WEBHOOK_URL != ''
        run: |
          STATUS="${{ needs.build-and-push.result }}"
          if [ "$STATUS" = "success" ]; then
            STATUS_KR="ÏÑ±Í≥µ"
          else
            STATUS_KR="Ïã§Ìå®"
          fi

          curl -X POST -H 'Content-type: application/json' \
            --data "{\"channel\":\"#ci-cd\",\"text\":\"üê≥ Docker Ïù¥ÎØ∏ÏßÄ ÎπåÎìúÍ∞Ä ${STATUS_KR}ÌñàÏäµÎãàÎã§!\nüì¶ Î∏åÎûúÏπò: ${{ github.ref_name }}\nüîñ Ïª§Î∞ã: ${{ github.sha }}\nüë§ ÏûëÏÑ±Ïûê: ${{ github.actor }}\"}" \
            "${{ vars.SLACK_WEBHOOK_URL }}"
