version: '3.8'

services:
  mysql:
    image: mysql:8.0
    container_name: kamf-mysql # 고정 이름 (공유)
    restart: unless-stopped
    ports:
      - '3306:3306' # 고정 포트 (공유)
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-rootpassword}
      # 초기 데이터베이스는 생성하지 않음 (스크립트에서 처리)
    volumes:
      - mysql_data:/var/lib/mysql
      - ../mysql-init:/docker-entrypoint-initdb.d
    networks:
      - kamf-network
    command: --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ['CMD', 'mysqladmin', 'ping', '-h', 'localhost']
      timeout: 20s
      retries: 10
      interval: 30s

  api:
    image: ${DOCKER_REGISTRY}/kamf-api:${IMAGE_TAG:-latest}
    container_name: ${DEPLOY_PATH:-kamf}-api # 환경별 컨테이너 이름
    restart: unless-stopped
    ports:
      - '${API_PORT:-8000}:8000' # 환경별 외부 포트
    environment:
      # Application Environment
      NODE_ENV: ${NODE_ENV:-production}
      SERVER_PORT: 8000 # 내부 포트는 고정
      API_PREFIX: ${API_PREFIX:-api}
      CORS_ORIGIN: ${CORS_ORIGIN}

      # Database Connection (공유 MySQL)
      DB_HOST: kamf-mysql # 고정 호스트명
      DB_PORT: 3306
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME} # 환경별 데이터베이스

      # JWT & Authentication
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-1h}
      REFRESH_TOKEN_SECRET: ${REFRESH_TOKEN_SECRET}
      REFRESH_TOKEN_EXPIRES_IN: ${REFRESH_TOKEN_EXPIRES_IN:-7d}

      # Twilio SMS
      TWILIO_ACCOUNT_SID: ${TWILIO_ACCOUNT_SID}
      TWILIO_AUTH_TOKEN: ${TWILIO_AUTH_TOKEN}
      TWILIO_SERVICE_SID: ${TWILIO_SERVICE_SID}
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - kamf-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8000/health']
      timeout: 10s
      retries: 5
      interval: 30s

  web:
    image: ${DOCKER_REGISTRY}/kamf-web:${IMAGE_TAG:-latest}
    container_name: ${DEPLOY_PATH:-kamf}-web # 환경별 컨테이너 이름
    restart: unless-stopped
    ports:
      - '${WEB_PORT:-3000}:3000' # 환경별 외부 포트
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      NEXT_PORT: 3000 # 내부 포트는 고정
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
      NEXT_PUBLIC_APP_URL: ${NEXT_PUBLIC_APP_URL}
    depends_on:
      api:
        condition: service_healthy
    networks:
      - kamf-network
    healthcheck:
      test: ['CMD', 'wget', '--no-verbose', '--tries=1', '--spider', 'http://localhost:3000/']
      timeout: 10s
      retries: 5
      interval: 30s

  nginx:
    image: nginx:alpine
    container_name: kamf-nginx # 고정 이름 (공유)
    restart: unless-stopped
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
    depends_on:
      - api
      - web
    networks:
      - kamf-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost/health']
      timeout: 5s
      retries: 3
      interval: 30s

volumes:
  mysql_data:

networks:
  kamf-network:
    driver: bridge
